/* - Use flexbox or grid for form layout.
   - Style the form with a visually appealing design, including hover effects on buttons.
   - Use media queries to ensure the form is responsive.
   - Implement custom styles for input focus states.
   - Style validation messages using `:invalid` and `:valid` pseudo-classes.
   - Add custom styles for the file upload input.
 */
body{
    display: flex;
    font-family: Arial, Helvetica, sans-serif;
    background-color: lightyellow;
}

.form{
    background-image: linear-gradient(180deg, rgb(209, 223, 243), rgb(207, 251, 207));
    max-width: 500px;
    margin: auto;
    padding: 10px;
    border-radius: 30px;
}

.values{
    margin: 20px;
}

label{
    font-weight: bold;
}
button{
    width: 100px;
    height: auto;
    position: relative;
    left: 25%;
    cursor: pointer;
}

#focus:focus{
    background-color: rgb(239, 248, 248);
}
#focus:valid{
    border-color: green;
}
#focus:invalid{
    border-color: red;
}

button:hover{
    background-image: linear-gradient(90deg, lightgoldenrodyellow, lightgreen);
}
.photo:hover{
    cursor: pointer;
}
.name{
    width: 100%;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    box-sizing: border-box;
} 

@media screen and (max-width:992px) {
    body{
        background-color: lightyellow;
    }
    .form{
        max-width: 800px;
        margin: auto;
    } 
}
@media screen and (max-width:768px) {
    body{
        background-color: antiquewhite;
    }
    .form{
        max-width: 700px;
        margin: auto ;
    }
    
}

@media screen and (max-width:576px) {
    body{
        background-color: bisque;
    }
    .form{
        max-width: 500px;
        margin: auto;
    }
    
}


